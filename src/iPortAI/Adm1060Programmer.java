/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package iPortAI;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.SwingWorker;
import jssc.SerialPort;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author ldixon
 */
public class Adm1060Programmer extends javax.swing.JFrame {
    static String selectedPort = "";
    static SerialPort serialPort;
    static public List<String> data = null;
    
    /**
     * Creates new form Adm1060Programmer
     */
    public Adm1060Programmer() {
        initComponents();
        testSerialPort();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        load = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        program = new javax.swing.JButton();
        progress = new javax.swing.JProgressBar();
        filename = new javax.swing.JLabel();
        port = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comSelMsg = new javax.swing.JLabel();
        msgBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        load.setText("Load File");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        jLabel1.setText("Current File:");

        program.setText("Copy Configuration to EEPROM");
        program.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programActionPerformed(evt);
            }
        });

        filename.setText("No File Loaded!");

        port.setModel(new javax.swing.DefaultComboBoxModel(SerialPortList.getPortNames()));
        port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portActionPerformed(evt);
            }
        });

        jLabel2.setText("Serial Port:");

        msgBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(msgBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(program, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(load, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filename, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comSelMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filename, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(load)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comSelMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(program, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgBar, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        int returnVal = fc.showOpenDialog(Adm1060Programmer.this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            filename.setText(selectedFile.getName());
            parseFile(selectedFile.getPath());
        }
    }//GEN-LAST:event_loadActionPerformed

    private void portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portActionPerformed
        comSelMsg.setText("");
        testSerialPort();
    }//GEN-LAST:event_portActionPerformed

    private void programActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programActionPerformed
        program.setEnabled(false);
        selectedPort = (String)port.getSelectedItem();
        try {
            if(serialPort != null) {
                if(serialPort.isOpened()) {
                    serialPort.closePort();
                }
            }
            serialPort = new SerialPort(selectedPort);
            System.out.println("Opening Adapter Connection on [" + selectedPort + "]...");
                if(serialPort.openPort()) {//Open serial port
                    serialPort.setParams(19200, 8, 1, 0);//Set params.
                    if(iPortAI_reset() == 1) {
                        comSelMsg.setText("iPort/AI Found on "+selectedPort);
                        iPortAI_setAddress("a8");
                    } else {
                        serialPort.closePort();
                        comSelMsg.setText("No iPort/AI Found on "+selectedPort);
                        msgBar.setText("Check iPort/AI connection!");
                        program.setEnabled(true);
                    }
                } else {
                    
                }
        } catch (SerialPortException ex) {
           comSelMsg.setText(ex.getExceptionType());
           System.out.println(ex);
        }
        
        if(serialPort != null) {
            if(serialPort.isOpened()) {
                //check to make sure file was parsed
                if(data != null) {
                    SwingWorker<?, ?> worker = new SwingWorker<Object, Object>() {  
                        @Override  
                        protected Object doInBackground() throws Exception {
                        if(iPortAI_open() == 1) {
                            if(adm_erase_eeprom() == 1) {
                                if(adm_program_eeprom() == 1) {
                                  if(adm_write_regs() == 1) {
                                    iPortAI_close();
                                  }
                                }
                            }
                        }
                        program.setEnabled(true);
                        serialPort.closePort();
                        return null;
                        }   
                    };
                  worker.execute(); 
                } else {
                    msgBar.setText("Please load a file!");
                    program.setEnabled(true);
                }  
            }
        }
    }//GEN-LAST:event_programActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            if(serialPort != null) {
                if(serialPort.isOpened()) {
                    serialPort.closePort();
                }
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adm1060Programmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adm1060Programmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adm1060Programmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adm1060Programmer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Adm1060Programmer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel comSelMsg;
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel filename;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton load;
    private javax.swing.JLabel msgBar;
    private javax.swing.JComboBox port;
    private javax.swing.JButton program;
    private javax.swing.JProgressBar progress;
    // End of variables declaration//GEN-END:variables

     static String getReply(int size) {
        String rxByte;
        ArrayList<Character> buffer = new ArrayList<>();
        while(true){
            try {
                if(serialPort.getInputBufferBytesCount() > 0) {
                    rxByte = serialPort.readString(1);//Read all available from serial port and add it to buffer
       
                    if(!rxByte.equals("\n") && !rxByte.equals("\r") && !rxByte.equals("\t") && !rxByte.equals("*") && !rxByte.equals("")) {
                        buffer.add(rxByte.charAt(0));
                        if(buffer.size() == size) {
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        System.out.print(buffer);
        return getStringRepresentation(buffer);
    }
     
    private int testSerialPort() {
        selectedPort = (String)port.getSelectedItem();
        try {
            if(serialPort != null) {
                if(serialPort.isOpened()) {
                    serialPort.closePort();
                }
            }
            
            serialPort = new SerialPort(selectedPort);
            System.out.println("Opening Adapter Connection on [" + selectedPort + "]...");
                if(serialPort.openPort()) {//Open serial port
                    serialPort.setParams(19200, 8, 1, 0);//Set params.
                    if(iPortAI_reset() == 1) {                      
                        comSelMsg.setText("iPort/AI Found on "+selectedPort);
                        serialPort.closePort();
                    } else {
                        comSelMsg.setText("No iPort/AI Found on "+selectedPort);
                        serialPort.closePort();
                    }
                } else {
                    
                }
        } catch (SerialPortException ex) {
           comSelMsg.setText(ex.getExceptionType());
           System.out.println(ex);
        }
        return 1;
    }
    
    static int iPortAI_open() {
        System.out.println("Opening i2c Port");
        try {
            serialPort.writeBytes("/O\r".getBytes());//Write data to port
        } catch (Exception e) {
            System.out.println(e);
        }

        if(getReply(4).equals("/OCC")) {
            System.out.println("i2c Port Open");
            return 1;
        } else {
            return 0;
        }
    }
    
    static int iPortAI_close() {
        System.out.println("Closing i2c Port");
        try {
            serialPort.writeBytes("/C\r".getBytes());//Write data to port
        } catch (Exception e) {
            System.out.println(e);
        }

        if(getReply(4).equals("/CCC")) {
            System.out.println("i2c Port Closed");
            return 1;
        } else {
            return 0;
        }
    }
    
    static int iPortAI_reset() {
        int timeout = 0;
        try {
            //reset iPort/AI
            serialPort.writeByte((byte)0x12);
            serialPort.writeByte((byte)0x12);
            serialPort.writeByte((byte)0x12);

            //check to make sure iPort is up and running
            while(true) {
                if(serialPort.getInputBufferBytesCount() > 0) {
                    if(serialPort.readString().replace("\n", "").replace("\r", "").equals("*")) {
                        //iPortReady = true;
                        System.out.println("iPort/AI Ready");
                        return 1;
                    }
                }
                if(timeout == 3000) {
                    return 0;
                }
                timeout++;
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
        return 0;
    }
    
    static int iPortAI_setAddress(String address) {
        try {
            serialPort.writeBytes(("/D"+address+"\r").getBytes());//Write data to port

            //check to make sure iPort is up and running
            while(true) {
                if(serialPort.getInputBufferBytesCount() > 0) {
                    if(serialPort.readString().replace("\n", "").replace("\r", "").equals("*")) {
                        //i2cAddrSet = true;
                        System.out.println("i2c Slave Address Set");
                        return 1;
                    }
                }
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
        return 0;
    }
    
    int adm_erase_eeprom() {
        msgBar.setText("Erasing EEPROM");
        System.out.println("Erasing EEPROM");
        try {
            //Enable erasure
            serialPort.writeBytes("/t~90~08\r".getBytes());//Write data to port
            String reply = getReply(4);
            if(reply.equals("/MTC")) {   
                Double percentComplete = 0.0;
                System.out.println(Math.round(percentComplete)+"%");
                for(int addr = 0xf800; addr <= 0xf9ff; addr += 0x20) {
                    percentComplete += 6.25;
                    String address = Integer.toHexString(addr);
                    String lowByte = address.substring(0,2);
                    String highByte = address.substring(2,4);

                    serialPort.writeBytes(("/t~"+lowByte+"~"+highByte+"\r").getBytes());//Write data to port
                    reply = getReply(4);
                    if(reply.equals("/MTC")) {
                        serialPort.writeBytes("/t~fe\r".getBytes());//Write data to port
                        reply = getReply(4);
                        if(reply.equals("/MTC")) {
                            try {
                                Thread.sleep(20);
                            } catch(InterruptedException e) {
                                System.out.println(e);
                            }
                        } else if(reply.equals("/I85")) {
                            msgBar.setText("i2c Bus Time-out Detected");
                            System.out.println("i2c Bus Time-out Detected");
                            progress.setValue(0);
                            return 0;
                        }
                    } else if(reply.equals("/I85")) {
                        msgBar.setText("i2c Bus Time-out Detected");
                        System.out.println("i2c Bus Time-out Detected");
                        progress.setValue(0);
                        return 0;
                    }
                    progress.setValue(percentComplete.intValue());
                    progress.setStringPainted(true);
                    System.out.println(Math.round(percentComplete)+"%");
                    
                }
            } else if(reply.equals("/I85")) {
                msgBar.setText("i2c Bus Time-out Detected");
                System.out.println("i2c Bus Time-out Detected");
                progress.setValue(0);
                return 0;
            } else if(reply.equals("/SNA")) {
                msgBar.setText("Slave Not Acknowledging");
                System.out.println("Slave Not Acknowledging");
                progress.setValue(0);
                return 0;
            }
        } catch(SerialPortException ex) {
            System.out.println(ex);
        }
        return 1;
    }
    
    int adm_program_eeprom() {
        String reply;
        msgBar.setText("Programming EEPROM");
        progress.setValue(0);
        System.out.println("Programming EEPROM");
        System.out.println(data.size());
        Double percentComplete = 0.0;
        System.out.println(Math.round(percentComplete)+"%");
        int count = 0;
        int endAddr = 0xf800 + data.size();
        for(int addr = 0xf800; addr < endAddr; addr += 0x01) {
            String address = Integer.toHexString(addr);
            String lowByte = address.substring(0,2);
            String highByte = address.substring(2,4);
            try {
                serialPort.writeBytes(("/t~"+lowByte+"~"+highByte+"~"+data.get(count)+"\r").getBytes());//Write data to port
                reply = getReply(4);
                if(reply.equals("/MTC")) {            
                    if(count % 32 == 0) {
                        percentComplete += 12.5;
                        progress.setValue(percentComplete.intValue());
                        progress.setStringPainted(true);
                        System.out.println(Math.round(percentComplete)+"%");
                    }
                } else if(reply.equals("/I85")) {
                    msgBar.setText("i2c Bus Time-out Detected");
                    System.out.println("i2c Bus Time-out Detected");
                    progress.setValue(0);
                    return 0;
                }
            } catch (SerialPortException ex) {
                System.out.println(ex);
            }
            count++;
        }
        percentComplete += 12.5;
        progress.setValue(percentComplete.intValue());
        progress.setStringPainted(true);
        System.out.println(Math.round(percentComplete)+"%");
        return 1;
    }
    
    int adm_write_regs() {
        msgBar.setText("Writing registers");
        System.out.println("Writing registers");
        
        try {
            serialPort.writeBytes("/t~90~04\r".getBytes());//Write data to port
            if(getReply(4).equals("/MTC")) { 
                serialPort.writeBytes("/t~90\r".getBytes());//Write data to port
                if(getReply(4).equals("/MTC")) { 
                    serialPort.writeBytes("/r1\r".getBytes());//Write data to port
                    if(getReply(4).equals("/MRC")) {
                        if(getReply(3).equals("~00")) {
                            serialPort.writeBytes("/t~90~03\r".getBytes());//Write data to port
                            if(getReply(4).equals("/MTC")) { 
                                msgBar.setText("Programming complete");
                                System.out.println("Programming complete");
                                return 1;
                            }
                        }
                    }
                }
            }
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
        return 0;
    }
    
    static boolean parseFile(String filename) {
        File file = new File(filename);
        String dataBytes = "";
        StringBuilder fileContents = new StringBuilder((int)file.length());
        Scanner scanner = null;
        try {
            scanner = new Scanner(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Adm1060_Final.class.getName()).log(Level.SEVERE, null, ex);
        }
        String lineSeparator = System.getProperty("line.separator");

        try {
            while(scanner.hasNextLine()) {        
                fileContents.append(scanner.nextLine()).append(lineSeparator);
            }
            dataBytes = fileContents.toString();
        } finally {
            scanner.close();
        }
        
        Pattern pattern = Pattern.compile("(?!<{1})([A-Fa-f0-9]{2})(;)([A-Fa-f0-9]{2})(?=>{1})");

        Matcher matcher = pattern.matcher(dataBytes);

        boolean found = false;
        data = new ArrayList<>();
        while (matcher.find()) {
            String matches[] = matcher.group().split(";");
            data.add(matches[1]);
            found = true;
        }
        
        if(!found){
            System.out.println("No match found.");
        }
        return true;
    }
    
    static String getStringRepresentation(ArrayList<Character> list) {    
        StringBuilder builder = new StringBuilder(list.size());
        for(Character ch: list)
        {
            builder.append(ch);
        }
        return builder.toString();
    }
}
